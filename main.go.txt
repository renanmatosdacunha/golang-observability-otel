package main

import (
	"context"
	"log"
	"log/slog"

	"github.com/renanmatosdacunha/golang-observability-otel.git/api"
	logs "github.com/renanmatosdacunha/golang-observability-otel.git/telemetry"
)

const (
	serverAddress = "0.0.0.0:8080"
)

func main() {
	baselogger := logs.NewLogger()
	logger := baselogger.With(
		slog.Group("Resource",
			slog.String("service.name", "golang-observability"),
			slog.String("deployment.environment", "delevopment"),
		),
	)

	server := api.NewServer(logger)
	logger.Log(context.Background(), slog.LevelInfo,
		"a iniciar o servidor", // Esta será a 'Body'
		// Adiciona os campos customizados para corresponder ao formato desejado.
		slog.Int("SeverityNumber", logs.GetSeverityNumber(slog.LevelInfo)),
		slog.Group("Attributes",
			slog.String("address", serverAddress),
		),
	)

	//logger.Info("Start Service", slog.String("address:", serverAddress))

	err := server.Start(serverAddress)
	if err != nil {
		log.Fatal("Cannot start server", err)
	}
}

package main

import (
	"context"
	"log/slog"
	"os"

	"github.com/renanmatosdacunha/golang-observability-otel.git/api"
	"github.com/renanmatosdacunha/golang-observability-otel.git/logs"
)

const (
	serverAddress = "0.0.0.0:8080"
)

func main() {
	// Usa um contexto de fundo simples, uma vez que já não estamos a lidar com sinais.
	ctx := context.Background()

	// Inicializa o logger do OpenTelemetry.
	logger, shutdownLogs := logs.InitOtelLogging(ctx)
	// O defer para o shutdown do logger continua a ser importante para garantir que os logs em buffer são enviados.
	defer shutdownLogs()

	server := api.NewServer(logger)

	logger.Info("a iniciar o servidor", slog.String("address", serverAddress))

	// A chamada a server.Start() volta a ser a última coisa na função main.
	// É uma chamada bloqueante, e o programa só terminará quando este processo for interrompido (ex: Ctrl+C).
	if err := server.Start(serverAddress); err != nil {
		logger.Error("não foi possível iniciar o servidor", slog.String("error", err.Error()))
		os.Exit(1)
	}
}